There are generally six phases in the SDLC process, planning, design, development, testing, deployment, and maintenance. Each phase is discrete meaning that tasks from a previous phase do not overlap with tasks in the next phase.

Note that some organizations may have different names for each stage. For example, “planning” may be called “requirements” or “strategy” or “analysis”. Also, some organizations may have additional or fewer stages.

-  In the first stage of the SDLC, the planning phase, requirements are gathered, analyzed, documented and prioritized. When planning a software solution, the following factors must be considered: users of the solution the overall purpose of the solution, data inputs and outputs, legal and regulatory compliance, risk identification, quality assurance requirements, allocation of human and financial resources, and project scheduling. Also, project teams are identified, and roles of each team member are proposed. Often the development team may produce prototypes during the planning stage to tease out those requirements. After requirements have been gathered, they are combined into a document called a software requirements specification, or SRS, document

- In the design phase, the requirements gathered from the SRS are used to develop the software architecture. Several team members work together at this stage to design the architecture. And during this phase, prototypes can be designed. The document created in this phase is called a design document, and is used by developers during the next phase, which is the development phase.

- The development phase, sometimes called the “building" phase or the "implementation" phase, is when the developers start the coding process once the design document is completed. The project planners use the design document to determine and assign coding tasks.

-The testing phase is next in the process once the coding is complete. Code needs to be thoroughly tested to ensure it is stable, secure, and meets the requirements outlined in the SRS. Product bugs are reported, tracked, and fixed, and code is retested until the software is stable. Some common levels of testing include unit testing, integration testing, system testing, and acceptance testing.

- The deployment phase is where the application is released into the production environment and made available to users. This can also happen in stages— first, it is released onto a user acceptance testing, also called UAT, platform and once the customer signs off on the functionality, it is released to production. 

- Finally, the maintenance phase happens once the code has been deployed into a production environment. This phase helps to find any other bugs, identify user interface issues, or UI for short, and identify other requirements that may not have been listed in the SRS. Code enhancements can also be identified at this stage. If bugs are discovered in this phase that were missed during testing, these errors may need to be fixed for high-priority issues or incorporated into the requirements as part of a future software release and the process can start over again.
