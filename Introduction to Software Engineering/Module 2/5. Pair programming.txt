Pair programming is an extension of teamwork where two developers work side-by-side at one computer.

There are various styles of pair programming: Driver/navigator style is the most common style, where one developer is the driver, typing in the code, and the other is the navigator, reviewing the code as it’s written and giving directions where to go next.

Ping-pong style incorporates test-driven development. For each task, one developer writes a failing test and then the second developer writes code to pass that test. For each new task, they swap roles, so regularly changing who writes the test and who writes the implementation.

Strong style pair programming is a good way for junior software engineers to learn from more experienced ones. The defining rule for this is that for an idea to go from your head to the computer, it must go through someone else’s hands. So, the more experienced of the pair is the navigator and the driver learns from witnessing their implementation and thought processes.

It’s a good way to share knowledge and skills from one developer to another or between the two and a great way for a new team member to get up to speed on a project. As well as enhancing the technical skills of the pair, it’s also a good way of building soft skills such as communication and problem solving. Having two sets of eyes on the code often results in fewer typos, logic errors, and bugs. And it enables code reviews to be done on the fly. 

Working in a pair requires long periods of focus which can be exhausting for the two programmers. And personal or other work commitments can impact the pair schedule. Sometimes one of the pair can end up controlling the entire process, resulting in a more typist/programmer pairing which doesn’t benefit from any of the positives of pair programming. 